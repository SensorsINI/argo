// SPDX-License-Identifier: GPL-2.0
// DTS for Argo Radio Servo Module Overlay on Orange Pi Zero 2W (Allwinner H618)
// This overlay ONLY configures input pins PI11 and PI13 for EINT.
// It relies on the base DT and other Armbian overlays for PWM output functionality.

#include <dt-bindings/interrupt-controller/irq.h>
#include <dt-bindings/interrupt-controller/arm-gic.h>
#include <dt-bindings/gpio/gpio.h> // For GPIO_ACTIVE_HIGH/LOW, etc.


/dts-v1/;
/plugin/;

/ {
    compatible = "xunlong,orangepi-zero2w", "allwinner,sun50i-h618";

    // Node for our kernel module to claim GPIOs (using compatible for lookup)
    argo_radio_servo_gpios: argo_radio_servo_gpios {
        compatible = "argo,radio-servo-gpio";
        // Define GPIOs for input measurement.
        // PI11 (Bank I, Pin 11) for Radio Rudder
        radio_rudder_gpio = <&pio 8 11 GPIO_ACTIVE_HIGH>;
        // PI13 (Bank I, Pin 13) for Radio Sail
        radio_sail_gpio = <&pio 8 13 GPIO_ACTIVE_HIGH>;
    };

    // --- Fragment 0: Define our specific EINT pin groups as children of &pio ---
    // This fragment creates the named pin groups that will be referenced by other fragments.
    fragment@0 {
        target = <&pio>; // Target the main pinctrl node (&pio == pinctrl@300b000)
        __overlay__ {
            pinctrl-names = "default"; // Declare the default pinctrl state
            pinctrl-0 = <&pi11_eint_pulse_in_group>,
                          <&pi13_eint_pulse_in_group>; // Only our EINT pins

            // PI11 (PWM1_RADIO_RUDDER) - Input for measurement (EINT function)
            // Manual: PI11_SELECT 110:PI_EINT11 (ALT6)
            pi11_eint_pulse_in_group: pi11_eint_pulse_in_group {
                pins = "PI11";
                function = "pi_eint11"; // EINT function for PI11
            };

            // PI13 (PWM3_RADIO_SAIL) - Input for measurement (EINT function)
            // Manual: PI13_SELECT 110:PI_EINT13 (ALT6)
            pi13_eint_pulse_in_group: pi13_eint_pulse_in_group {
                pins = "PI13";
                function = "pi_eint13"; // EINT function for PI13
            };
        };
    };

    // --- No fragments for Ethernet disablement or PWM output pinmuxing here ---
    // We rely on the base DT and other overlays for PWM output.
};
